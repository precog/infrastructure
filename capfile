# ; -*-ruby-*-

default_run_options[:pty] = true
#default_run_options[:max_hosts] = 1

set :user, "ubuntu"
ssh_options[:keys] = [File.join(File.dirname(__FILE__),  'ec2', 'ec2-keypair.pem')]

role :none
role :appserver, *[1,3,4,5,6].map { |i| "appserver#{'%02d' % i}.reportgrid.com" }
role :mongodb, *(13..21).map { |i| "mongodb#{'%02d' % i}.reportgrid.com" }
role :mongodb_config, *(1..3).map { |i| "mongodb-config#{'%02d' % i}.reportgrid.com" }
role :mongoevents, *(1..3).map { |i| "mongoevents#{'%02d' % i}.reportgrid.com" }
role :devapp, *(1..2).map { |i| "devapp#{'%02d' % i}.reportgrid.com" }
#
# Monit
#
desc "Monit monitor all"
task :monit_monitor_all do
  run "#{sudo} monit monitor all"
end

desc "Monit unmonitor all"
task :monit_unmonitor_all do
  run "#{sudo} monit unmonitor all"
end

#
# Service management
#
desc "Manage a Service"
task :service, :roles => :none, :max_hosts => 1 do
  run "#{sudo} service #{ENV['SERVICE']} #{ENV['ACTION']}"
end

desc "Reload HAProxy"
task :haproxy_reload, :roles => :appserver, :max_hosts => 1 do
  run "#{sudo} service haproxy reload"
end

desc "Reload Mongos"
task :restart_mongos, :roles => :appserver, :max_hosts => 1 do
  run "#{sudo} restart mongos"
end

desc "Reload Analytics-v0"
task :analytics_restart_v0, :roles => :appserver, :max_hosts => 1 do
  run "#{sudo} service analytics-v0 restart"
end

desc "Reload Analytics-v1"
task :analytics_restart_v1, :roles => :appserver, :max_hosts => 1 do
  run "#{sudo} service analytics-v1 restart"
end

desc "Reload Billing-v1"
task :billing_restart_v1, :roles => :appserver, :max_hosts => 1 do
  run "#{sudo} service billing-v1 restart"
end

desc "Reload MongoDB"
task :mongodb_restart, :roles => :mongodb, :max_hosts => 1 do
  run "#{sudo} service mongodb restart"
end

desc "Restart vistrack-v1"
task :restart_vistrack_v1, :roles => :appserver, :max_hosts => 2 do
  run "#{sudo} restart vistrack-v1"
end

#
# Chef
#
desc "Run Chef"
task :chef_client do
  run "#{sudo} chef-client"
end

desc "Run Chef on app servers"
task :chef_client_app, :roles => :appserver, :max_hosts => 2 do
  run "#{sudo} chef-client"
end

desc "Run Chef on dev app servers"
task :chef_client_dev, :roles => :devapp do
  run "#{sudo} chef-client"
end

desc "Run Chef on mongo servers"
task :chef_client_mongo, :roles => [:mongoevents, :mongodb, :mongodb_config] do
  run "#{sudo} chef-client"
end

desc "Stop Chef"
task :chef_client_stop do
  run "#{sudo} service chef-client stop"
end

desc "Start Chef"
task :chef_client_start do
  run "#{sudo} service chef-client start"
end

desc "Restart Chef"
task :chef_client_restart, :roles => :none, :max_hosts => 1 do
  run "#{sudo} service chef-client restart"
end

#
# Package management
#
desc "Deploy a ReportGrid service"
task :deploy, :roles => :appserver, :sudo => true, :max_hosts => 1 do
  ENV['SERVICE'] = 'FIXME' unless ENV.include?('SERVICE')
  run "#{sudo} rm /usr/share/java/#{ENV['SERVICE']}.jar && \
       #{sudo} wget -O /usr/share/java/#{ENV['SERVICE']}.jar http://reportgrid.com.s3.amazonaws.com/deploy/production/#{ENV['SERVICE']}.jar && \
       #{sudo} service #{ENV['SERVICE']} restart"
end

desc "Get package version"
task :get_version, :roles => :none do
  run "/usr/bin/dpkg-query --showformat '${Version}' --show #{ENV['PACKAGE']}"
end

#
# Download / Install
#
desc "Download files"
task :download_files, :roles => :none do
  download(ENV['FROM'], ENV['TO'] + File::Separator + File.basename(ENV['FROM']) + "-$CAPISTRANO:HOST$")
end

desc "Aptitude Install"
task :aptitude_install, :roles => :none do
  run "#{sudo} aptitude install #{ENV['PACKAGE']}"
end


#
# RackSpace ubuntu account setup
#
desc "RackSpace Initial setup"
task :rackspace_setup do
  "You can set the password via \"-s password=...\" on the command line"
  set :user, "root"
  run "adduser \"ubuntu\" --gecos \"Management user\" --disabled-password &&
       echo \"ubuntu ALL=(ALL) NOPASSWD:ALL\" >> /etc/sudoers &&
       mkdir ~ubuntu/.ssh &&
       chown ubuntu:ubuntu ~ubuntu/.ssh &&
       chmod 700 ~ubuntu/.ssh"
  upload("ec2/ec2_keypair_authorized_keys", "/home/ubuntu/.ssh/authorized_keys", :via => :scp)
  run "chown ubuntu:ubuntu ~ubuntu/.ssh/authorized_keys"
end

#
# Fix mongo db/log links
#
desc "Fix mongo db/log locations"
task :fix_mongo_locs do
  run <<-EOH
#{sudo} test -d /srv/mongodb/db &&
#{sudo} test -d /srv/mongodb/logs &&
#{sudo} test ! -L /var/lib/mongodb &&
#{sudo} test ! -L /var/log/mongodb &&
#{sudo} /etc/init.d/monit stop &&
#{sudo} /etc/init.d/chef-client stop &&
#{sudo} stop mongodb &&
#{sudo} mv /var/lib/mongodb/* /srv/mongodb/db/ &&
#{sudo} mv /var/log/mongodb/* /srv/mongodb/logs/ &&
#{sudo} rmdir /var/lib/mongodb &&
#{sudo} rmdir /var/log/mongodb &&
#{sudo} ln -s /srv/mongodb/db /var/lib/mongodb &&
#{sudo} ln -s /srv/mongodb/logs /var/log/mongodb &&
#{sudo} start mongodb &&
#{sudo} /etc/init.d/chef-client start &&
#{sudo} /etc/init.d/monit start
EOH
end

# Properly set Adaptec RAID controller params
desc "Set 5405z performance param"
task :set_adaptec_perf do
run "#{sudo} /usr/StorMan/arcconf SETPERFORM 1 2"
end

# Remove extraneous packages from softlayer servers
desc "Remove SoftLayer junk"
task :remove_softlayer_junk do
run <<-EOH
#{sudo} stop mysql &&
#{sudo} /etc/init.d/bind9 stop &&
#{sudo} /etc/init.d/apache2 stop &&
#{sudo} aptitude purge -y mysql-server apache2 bind9
EOH
end
