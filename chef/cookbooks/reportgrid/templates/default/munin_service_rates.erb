#!/usr/bin/env ruby
#
# Copyright 2011, ReportGrid, Inc.
#
# ; -*-ruby-*-
#
#
#%# family=auto
#%# capabilities=autoconf


require 'net/http'
require 'uri'

require 'rubygems'
require 'json'

service_name = "<%= @service_name %>"
service_version = "<%= @service_version %>"
health_path = "/blueeyes/services/#{service_name}/#{service_version}/health"

# Collect what values we can from localhost
url = URI.parse("http://localhost/")

if ARGV.length == 1 and ARGV[0] == "config" then
  puts <<-EOH
graph_title #{service_name}-#{service_version} request rates
graph_vlabel per second
graph_args --base 1000 -l 0
graph_scale no
graph_category reportgrid
GET.label GET
GET.type GAUGE
GET_errors.label GET errors
GET_errors.type ABSOLUTE
POST.label POST
POST.type GAUGE
POST_errors.label POST errors
POST_errors.type ABSOLUTE
EOH
exit
elsif ARGV.length == 1 and ARGV[0] == "autoconf" then
  # check whether the service is available
  Net::HTTP.start(url.host, url.port) do |http|
    http.request_get(health_path) do |response|
      if response.is_a? Net::HTTPOK then
        puts "yes"
      else
        puts "no [#{service_name}-#{service_version} is not responding]"
      end
    end
  end
  exit
elsif ARGV.length != 0 then
  $stderr.puts("Invalid arguments specified")
  exit(1)
end

# Utility method for fetching nested hash values safely
def safe_get (d, *keys)
  begin
    s = d
    keys.each {|k| s = s[k]}
    yield s
  rescue NoMethodError => e
  end
end

Net::HTTP.start(url.host, url.port) do |http|
  http.request_get(health_path) do |response|
    if response.is_a? Net::HTTPNotFound then
      # Service must not be running. Don't report anything
    elsif not response.is_a? Net::HTTPOK then
      $stderr.put("Error collecting stats: #{response.read_body}")
    else
      begin
        data = JSON.parse(response.read_body)
        
        ["GET", "POST"].each do |verb|
          safe_get(data,"requests",verb,"timing","perSecond","5min x 1") {|v| puts "#{verb}.value #{v}" }
          error_value = nil
          safe_get(data,"requests",verb,"errors","errorDistribution") {|errors|
            error_value = errors.map{|k,v| v["5min x 1"].to_i }.flatten.reduce(:+)
          }
          error_value ||= 0
          puts "#{verb}_errors.value #{error_value}"
        end
      rescue => e
        $stderr.puts("Error parsing response: #{e.message}")
      end
    end
  end
end
